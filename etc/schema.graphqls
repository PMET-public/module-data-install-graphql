type StoreConfig {
    root_cateogry_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\RootCategoryName") @doc(description:"Name of Stores Root Category")
    theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"Path of the Store's Theme")
}
interface CategoryInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\CategoryInterfaceTypeResolver") {
    custom_design_theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CustomDesign") @doc(description:"Path of the Theme")
    landing_page_identifier: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\LandingPage") @doc(description:"identifier of landing page")
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    name_path: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\NamePath") @doc(description:"path by name excluding root, parent and self")
    category_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CategoryName") @doc(description:"name with path delimiter escaped")
    page_layout: String
    custom_design: String
}

type CmsBlock {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    block_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\BlockContent") @doc(description:"raw block content")
}

type Query {
    cmsPages: CmsPages @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Pages") @doc(description: "Get all the CMS Pages from store.")
}

type CmsPage {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    page_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\PageContent") @doc(description:"raw page content")
}


type Query {
    dataInstallerLogs(
        jobId: String @doc(description: "id of job if import was done via admin ui. If used, datapack value is ignored") 
        datapack: String @doc(description: "datapack installed, uses instring comparison, so full path of data pack is not needed")
    ): DataIntstallerLog @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\DataInstallLog") @doc(description:"Get information about a Data Installer Job")
}

type DataIntstallerLog @doc(description: "Retrieves all records from a Data install Job") {
    log_records: [DataInstallerLogRecord] @doc(description: "An array containing the log entries from a data install job")
}

type DataInstallerLogRecord {
    job_id: String @doc(description: "Ids of job if added via scheduled job")
    datapack: String @doc(description: "Path to data pack")
    level: String @doc(description: "Type of message: info, warning or error")
    message: String @doc(description: "Information from installer")
    add_date: String @doc(description: "Timestamp when record was added")
}

type Mutation {
  createDataInstallerJob(input: DataInstallerJobInput!): DataInstallerJobOutput
    @resolver(
      class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\ScheduleJob"
    )
    @doc(description: "launch installation of data pack")
}

type DataInstallerJobOutput {
  job_id: String
}

input DataInstallerJobInput @doc(description: "datapack only required value") {
  datapack: String @doc(description: "Name of module or path to Data Pack")
  load: String @doc(description: "Subdirectory of data to load")
  files: String @doc(description: "Comma delimited list of file so load")
  host: String @doc(description: "Override for host value in stores file")
  reload: Int @doc(description: "1 if reloading an existing Data Pack")
}
