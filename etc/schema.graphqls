type Query {
    dataInstallerLogs(
        jobId: String @doc(description: "id of job if import was done via admin ui. If used, datapack value is ignored") 
        datapack: String @doc(description: "datapack installed, uses instring comparison, so full path of data pack is not needed")
    ): DataIntstallerLog @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\DataInstallLog") @doc(description:"Get information about a Data Installer Job")
    customerGroups(
        identifiers: [String] @doc(description: "Names or Ids of Groups") 
    ): CustomerGroups @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\CustomerGroups") @doc(description:"Array of customer groups")
    customerSegments(
        identifiers: [String] @doc(description: "Names or IDs of segments") 
    ): CustomerSegments @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\CustomerSegments") @doc(description:"Array of customer segments")
    cartRules(
        identifiers: [String] @doc(description: "Names or IDs of cart rules") 
    ): CartRules @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Marketing\\CartRules") @doc(description:"Array of cart rules")
    cmsPages(
        identifiers: [String] @doc(description: "Identifiers or IDS of the CMS pages")
    ): CmsPages @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Pages") @doc(description: "Get CMS Pages from store.")
    msiSource(
        identifiers: [String] @doc(description: "Code of the Msi Source")
    ): MsiSources @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Inventory\\MsiSource") @doc(description: "Get Msi Sources.")
    msiStock(
        identifiers: [String] @doc(description: "Names or Ids of the Msi Stock")
    ): MsiStocks @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Inventory\\MsiStock") @doc(description: "Get Msi Stocks.")
    rewardsPointsExchangeRate(
        identifiers: [String] @doc(description: "Ids of Echange Rates")
    ): RewardPointsRateList @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Customer\\RewardExchangeRates") @doc(description: "Get Rewards Exchange Rates")
    upsells(
        identifiers: [String] @doc(description: "Names or IDs of related product rules") 
    ): Upsells @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Marketing\\Upsells") @doc(description:"Array of related product rules")
    widgets(
        identifiers: [String] @doc(description: "Titles or IDs of widgets") 
    ): Widgets @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\Widgets") @doc(description:"Array of widgets")

}

type StoreConfig {
    root_cateogry_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\RootCategoryName") @doc(description:"Name of Stores Root Category")
    theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"Path of the Store's Theme")
}
interface CategoryInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\CategoryInterfaceTypeResolver") {
    custom_design_theme: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CustomDesign") @doc(description:"Path of the Theme")
    landing_page_identifier: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\LandingPage") @doc(description:"identifier of landing page")
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    name_path: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\NamePath") @doc(description:"path by name excluding root, parent and self")
    category_name: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Category\\CategoryName") @doc(description:"name with path delimiter escaped")
    page_layout: String
    custom_design: String
}

type CmsBlock {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    block_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\BlockContent") @doc(description:"raw block content")
}

type CmsPages @doc(description: "CMS pages information") {
    items: [CmsPage] @doc(description: "An array of CMS pages")
}

type CmsPage {
    store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
    page_content: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Cms\\PageContent") @doc(description:"raw page content")
}

type CartRules @doc(description: "Retrieves all requested Cart Rules") {
    items: [CartRule] @doc(description: "An array containing the cart rules")
}

type CartRule {
    site_code: String
    customer_group: String
    name: String
    description: String
    uses_per_customer: Int
    stop_rules_processing: Int
    is_advanced: Int
    sort_order: Int
    simple_action: String
    discount_amount: String
    discount_qty: String
    apply_to_shipping: Int
    times_used: Int
    is_rss: Int
    coupon_type: String
    use_auto_generation: Int
    uses_per_coupon: Int
    simple_free_shipping: Int
    coupon_code: String
    reward_points_delta: String
    conditions_serialized: String
    actions_serialized: String

}

type CustomerGroups @doc(description: "Retrieves all requested Customer Groups") {
    items: [CustomerGroup] @doc(description: "An array containing the customer group")
}

type CustomerGroup {
    name: String
    tax_class: String
}

type CustomerSegments @doc(description: "Retrieves all requested Customer Segments") {
    items: [CustomerSegment] @doc(description: "An array containing the customer segments")
}

type CustomerSegment {
    site_code: String
    name: String
    description: String
    conditions_serialized: String
    apply_to: String @doc(description: "2= Apply to Visitors, 1= Apply to Registered Users, 0= Both Visitors and Registered")
}

type MsiSources @doc(description: "Retrieves all requested Msi Sources") {
    items: [MsiSource] @doc(description: "An array containing the Msi Sources")
}

type MsiSource {
    source_code: String @doc(description: "Unique code of the source")
    name: String @doc(description: "Name as shown in admin")
    enabled: Int 
    description: String
    latitude: String @doc(description: "Required if used as pickup location")
    longitude: String @doc(description: "Required if used as pickup location")
    region_id: Int
    country_id: String
    city: String 
    street: String 
    postcode: String
    contact_name: String
    email: String
    phone: String
    fax: String
    use_default_carrier_config: Int
    is_pickup_location_active: Int
    frontend_name: String @doc(description: "Name as shown on storefront")
    frontend_description: String @doc(description: "Description shown on storefront")
}

type MsiStocks @doc(description: "Retrieves all requested Msi Stocks") {
    items: [MsiStock] @doc(description: "An array containing the Msi Stock")
}

type MsiStock {
    stock_name: String @doc(description: "Name as shown in admin")
    site_code: String  @doc(description: "List of site codes")
    source_code: String  @doc(description: "List of source codes to assign to the stock")
}


type CustomerSegments @doc(description: "Retrieves all requested Customer Segments") {
    items: [CustomerSegment] @doc(description: "An array containing the customer segments")
}

type StorefrontProperties{
    is_pagebuilder_enabled: String
}

type DataIntstallerLog @doc(description: "Retrieves all records from a Data install Job") {
    log_records: [DataInstallerLogRecord] @doc(description: "An array containing the log entries from a data install job")
}

type DataInstallerLogRecord {
    job_id: String @doc(description: "Ids of job if added via scheduled job")
    datapack: String @doc(description: "Path to data pack")
    level: String @doc(description: "Type of message: info, warning or error")
    message: String @doc(description: "Information from installer")
    add_date: String @doc(description: "Timestamp when record was added")
}

type Mutation {
  createDataInstallerJob(input: DataInstallerJobInput!): DataInstallerJobOutput
    @resolver(
      class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\DataInstall\\ScheduleJob"
    )
    @doc(description: "launch installation of data pack")
}

type DataInstallerJobOutput {
  job_id: String
}

input DataInstallerJobInput @doc(description: "datapack only required value") {
  datapack: String @doc(description: "Name of module or path to Data Pack")
  load: String @doc(description: "Subdirectory of data to load")
  files: String @doc(description: "Comma delimited list of file so load")
  host: String @doc(description: "Override for host value in stores file")
  reload: Int @doc(description: "1 if reloading an existing Data Pack")
}

type Attribute {
     admin_properties: AdminProperties @resolver(class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Attribute\\AdminProperties") 
     @doc(description: "Contains details about the admin settings configured for the attribute")
     store_view_code: String @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\StoreViewCode")
}

type AdminProperties {
    attribute_set: String
    frontend_label: String
    is_visible: Int
    is_searchable: Int
    is_comparable: Int
    is_html_allowed_on_front: Int
    is_used_for_price_rules: Int
    used_for_sort_by: Int
    is_visible_in_advanced_search: Int
    is_wysiwyg_enabled: Int
    is_used_for_promo_rules: Int
    is_required_in_admin_store: Int
    is_used_in_grid: Int
    is_visible_in_grid: Int
    is_filterable_in_grid: Int
    search_weight: Int
    is_pagebuilder_enabled: Int
    additional_data: String
}

type RewardPointsRateList @doc(description: "Retrieves all requested Rewards Exchange Rates") {
    items: [RewardPointsRate]
}

type RewardPointsRate {
    site_code: String @doc(description:"Single site code or comma delimited list")
    customer_group: String @doc(description:"Single group name or comma delimited list")
    direction: String @doc(description:"points_to_currency or currency_to_points")
}

type Upsells @doc(description: "Retrieves all requested Related Product Rules") {
    items: [Upsell] @doc(description: "An array containing the Related Product Rules")
}

type Upsell {
    name: String
    conditions_serialized: String
    actions_serialized: String
    positions_limit: Int
    apply_to: String
    sort_order: Int
    customer_segments: String
}

type Widgets @doc(description: "Retrieves all requested Widgets") {
    items: [Widget] @doc(description: "An array containing the Widgets")
}

type Widget {
    title: String
    instance_type: String
    theme: String  @resolver (class: "\\MagentoEse\\DataInstallGraphQl\\Model\\Resolver\\Store\\Theme") @doc(description:"Path of the Store's Theme")
    store_view_code: String
    widget_parameters: String
    sort_order: Int
    page_group: String
    layout_handle: String
    block_reference: String
    page_for: String
    entities: String
    page_template: String
}